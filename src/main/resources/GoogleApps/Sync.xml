<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.5" reference="GoogleApps.Sync" locale="">
  <web>GoogleApps</web>
  <name>Sync</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>GoogleApps.EditInGoogleApps</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title>Sync</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{groovy}}
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.http.javanet.NetHttpTransport;
import com.google.api.client.json.jackson.JacksonFactory;
import com.google.api.services.drive.Drive;
import com.google.api.services.drive.DriveScopes;
import com.google.gdata.client.docs.DocsService;

import java.util.Arrays;
import java.io.File;


SERVICE_ACCOUNT_EMAIL = "58448820359-1ojbugr6426kukbo6vobrchh6cmtksv4@developer.gserviceaccount.com";
SERVICE_ACCOUNT_PKCS12_FILE_PATH = "/WEB-INF/GoogleApps.p12";

/**
 * Build and returns a Drive service object authorized with the service accounts
 * that act on behalf of the given user.
 *
 * @param userEmail The email of the user.
 * @return Drive service object that is ready to make requests.
 */
def getCredential(email) {
  HttpTransport httpTransport = new NetHttpTransport();
  JacksonFactory jsonFactory = new JacksonFactory();
  GoogleCredential credential = new GoogleCredential.Builder()
      .setTransport(httpTransport)
      .setJsonFactory(jsonFactory)
      .setServiceAccountId(SERVICE_ACCOUNT_EMAIL)
      .setServiceAccountScopes(Arrays.asList(DriveScopes.DRIVE))
      .setServiceAccountUser(email)
      .setServiceAccountPrivateKeyFromP12File(new File(xcontext.context.getEngineContext().getRealPath(SERVICE_ACCOUNT_PKCS12_FILE_PATH)))
      .build();
    return credential;
 }

httpTransport = new NetHttpTransport();
jsonFactory = new JacksonFactory();

def getDriveService(credential) {
  return new Drive.Builder(httpTransport, jsonFactory, null).setHttpRequestInitializer(credential).build();
}

boolean needUpdate = false;
def gagroovy = xwiki.parseGroovyFromPage("GoogleApps.Groovy");
gagroovy.init(xwiki, xcontext, doc)
for(item in xwiki.searchDocuments(", BaseObject as obj where doc.fullName = obj.name and obj.className='GoogleApps.SynchronizedDocumentClass'", 0, 0)) {
  def itemdoc = xwiki.getDocument(item)
  for (itemobj in itemdoc.getObjects("GoogleApps.SynchronizedDocumentClass")) {
    def id = itemobj.get("id")
    if (id!="") {
    itemdoc.use(itemobj);
    def name = itemdoc.getValue("fileName");
    def email = itemdoc.getValue("user");
    def version = itemdoc.getValue("version");
    def editLink = itemdoc.getValue("editLink");
    def exportLink = itemdoc.getValue("exportLink");
    if (email==null || email=="")
     email = "ludovic@xwiki.com"
    def credential = getCredential(email);
    def driveService = getDriveService(credential);
    try {
      def result = driveService.files().get(id).execute();
      if (version==null || version=="" || version!="${result.version}") {
        if (exportLink!=null &amp;&amp; exportLink.startsWith("http")) {
        println "* {{translation key='googleapps.sync.reqUpdate' parameters='${item},${name}'/}}"
        println "** ${item} ${itemobj.nb} ${name}Â ${email} ${version}"
        println "** ${result.title} ${result.version}"
        needUpdate = true;
        if (request.confirm) {
           gagroovy.retrieveFileFromGoogle(driveService, item, name, result.id, exportLink)
        }
       } else {
        println "* {{translation key='googleapps.sync.reqUpdateCannot' parameters='${item},${name}'/}}"
       }
      } else {
        println "* {{translation key='googleapps.sync.isUpToDate' parameters='${item},${name}'/}}"
      }
    } catch(e) {
      println e.getMessage();
    }
   }
  }
}

if (needUpdate) {
   println """[[Confirm&gt;&gt;||queryString="confirm=1"]]"""
}
{{/groovy}}</content>
</xwikidoc>
